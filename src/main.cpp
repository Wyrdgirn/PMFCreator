#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <Mmsystem.h>
#include <commctrl.h>
#include <malloc.h>
#include <assert.h>
#include "version.h"

#ifdef NDEBUG
#ifdef assert
#undef assert
#endif // assert
#define assert(_Expression) \
{ \
    if(!_Expression) exit(__LINE__); \
}
#endif // NDEBUG

/*  Declare Windows procedure  */
LRESULT CALLBACK WindowProcedure (HWND, UINT, WPARAM, LPARAM);

/*  Make the class name into a global variable  */
char szClassName[ ] = "WindowsApp";
char titlename[256];
HWND label1;
HWND label2;
HWND label3;
HWND label4;
HWND label5;
HWND label6;
HWND label7;
HWND label8;
HWND edit1;
HWND edit2;
HWND edit3;
HWND edit4;
HWND edit5;
HWND edit6;
HWND button1;
HWND button2;
HWND button3;
HWND button4;
HWND chkbx1;

OPENFILENAME ofn;
char szFileName[MAX_PATH];
char savezFileName[MAX_PATH];
char text[255];
int mask4 = 255;
int r1=0;
int xero=0;
int fsize;
int frmfile;
int isend=0;
int counter=0;
int counter2=0;
int mins=0;
int secs=0;
int msec=0;
long totaltime;
int timeshifted=24;
int timecount=0;
int results=0;
size_t msizet=0;
size_t memalloc = 0;

char outfile[255];
char newinfile[255];
char infile[255];
char newpath[255];
FILE* gameboot;
FILE* mpsfile;

unsigned char HeaderFile[] = {
0x50,0x53,0x4D,0x46,0x30,0x30,0x31,0x32,0x00,0x00,0x08,0x00,0x00,0x5A,0x88,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x4E,0x00,0x00,0x00,0x01,0x5F,0x90,0x00,0x00,0x00,0x69,0x6F,0x75,
0x00,0x00,0x61,0xA8,0x00,0x01,0x5F,0x90,0x02,0x01,0x00,0x00,0x00,0x34,0x00,0x00,
0x00,0x01,0x5F,0x90,0x00,0x00,0x00,0x69,0x6F,0x75,0x00,0x01,0x00,0x00,0x00,0x22,
0x00,0x02,0xE0,0x00,0x21,0xEF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x11,
0x00,0x00,0xBD,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

HWND crteedtbox(HWND hwnd, int ID);
HWND lbel(HWND hwnd, int ID, const char* caption);
HWND bttn(HWND hwnd, int ID, const char* caption);
HWND chkbox(HWND hwnd, int ID, const char* caption);

void setwdthhgt(int x, int y,HWND hwnd);
void setpos(int x,int y,HWND hwnd);
int CheckMPS(char* filename);
long GetFileSize(char* tfile);
int  editheader(char* filename);
int FileCombine(char* mpsfile,char* newfile);
int insertheader(char* filename);
int insertmps(char* filename);
int flenmefx(char* infile);
int gtandmkpth(); //get and make the path of the new gameboot
bool cmpchar(char* str1, char* str2);
bool IsNumber(const char *str);

int WINAPI WinMain (HINSTANCE hThisInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR lpszArgument,
                    int nFunsterStil)

{
    HWND hwnd;               /* This is the handle for our window */
    MSG messages;            /* Here messages to the application are saved */
    WNDCLASSEX wincl;        /* Data structure for the windowclass */

    /* The Window structure */
    wincl.hInstance = hThisInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = WindowProcedure;      /* This function is called by windows */
    wincl.style = CS_DBLCLKS;                 /* Catch double-clicks */
    wincl.cbSize = sizeof (WNDCLASSEX);

    /* Use default icon and mouse-pointer */
    wincl.hIcon = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor (NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;                 /* No menu */
    wincl.cbClsExtra = 0;                      /* No extra bytes after the window class */
    wincl.cbWndExtra = 0;                      /* structure or the window instance */
    /* Use Windows's default color as the background of the window */
    wincl.hbrBackground =  (HBRUSH) COLOR_BACKGROUND;

    /* Register the window class, and if it fails quit the program */
    if (!RegisterClassEx (&wincl))
        return 0;

    sprintf(titlename,"PMF Creator v%d.%d%s by Wyrdgirn (Based on v0.2 by piccahoe)",
            MAJOR,MINOR,STATUS_SHORT);
    /* The class is registered, let's create the program*/
    hwnd = CreateWindowEx (
           0,                   /* Extended possibilites for variation */
           szClassName,         /* Classname */
           titlename,       /* Title Text */
           DS_MODALFRAME+WS_POPUP+WS_SYSMENU+WS_CAPTION+WS_MINIMIZEBOX, /* default window */
           CW_USEDEFAULT,       /* Windows decides the position */
           CW_USEDEFAULT,       /* where the window ends up on the screen */
           504,                 /* The programs width */
           180,                 /* and height in pixels */
           HWND_DESKTOP,        /* The window is a child-window to desktop */
           NULL,                /* No menu */
           hThisInstance,       /* Program Instance handler */
           NULL                 /* No Window Creation data */
           );

    /* Make the window visible on the screen */
    ShowWindow (hwnd, nFunsterStil);

    /* Run the message loop. It will run until GetMessage() returns 0 */
    while (GetMessage (&messages, NULL, 0, 0))
    {
        /* Translate virtual-key messages into character messages */
        TranslateMessage(&messages);
        /* Send message to WindowProcedure */
        DispatchMessage(&messages);
    }

    /* The program return-value is 0 - The value that PostQuitMessage() gave */
    return messages.wParam;
}


/*  This function is called by the Windows function DispatchMessage()  */

LRESULT CALLBACK WindowProcedure (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)                  /* handle the messages */
    {
	    case WM_COMMAND:
        {
				if (LOWORD(wParam)==0) {

				} else {
					if (LOWORD(wParam) == 3)
                     {

						ZeroMemory(&ofn, sizeof(ofn));
						ofn.lStructSize = sizeof(ofn);
						ofn.hwndOwner = hwnd;
						ofn.lpstrFilter = "MPS File (*.mps)\0*.mps\0";
						ofn.lpstrFile = szFileName;
						ofn.nMaxFile = MAX_PATH;
						ofn.Flags = OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;
						ofn.lpstrDefExt = "txt";
						if(GetOpenFileName(&ofn))
						{
                           if (CheckMPS(szFileName)   == 1)
                           {
						       SetDlgItemText(hwnd,2,szFileName);
						       wsprintf(text,"File Size: %i kb" ,GetFileSize(szFileName));
						       SetDlgItemText(hwnd,4,text);
                           } else {

                                  MessageBox(hwnd,"Either this file doesn't exist or this file isn't a mps file","error",MB_OK);
                           }
						}

                     }
                    if (LOWORD(wParam) == 7)
                    {

						ZeroMemory(&ofn, sizeof(ofn));
						ofn.lStructSize = sizeof(ofn);
						ofn.hwndOwner = hwnd;
						ofn.lpstrFilter = "pmf File (*.pmf)\0*.pmf \0";
						ofn.lpstrFile = savezFileName;
						ofn.nMaxFile = MAX_PATH;
						ofn.Flags = OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;
						ofn.lpstrDefExt = "txt";
						if(GetSaveFileName(&ofn))
						{

						   SetDlgItemText(hwnd,6,savezFileName);

						}
                    }

                    if (LOWORD(wParam) == 8)
                    {
                        LRESULT checkState;
                        char temp[255];
                        checkState = SendDlgItemMessage(hwnd,16,BM_GETCHECK, 0, 0);

                        if (GetDlgItemText(hwnd,2, temp, 255) == 0)
                        {
                            MessageBox(hwnd,"please enter the path to your mps!","Error",MB_OK);
                            return -1;
                        }
                        if (GetDlgItemText(hwnd,6,temp,255) == 0)
                        {
                            MessageBox(hwnd,"please enter the save path to your pmf file!","Error",MB_OK);
                            return -1;
                        }



                        GetDlgItemText(hwnd, 13, temp, 2);
                        mins = atoi(temp);

                        GetDlgItemText(hwnd,15, temp, 2);
                        secs = atoi(temp);

                        GetDlgItemText(hwnd,11, temp, 4);
                        msec = atoi(temp);

                        float fmsec = 1.0 - (1.0 - float(msec));

                        GetDlgItemText(hwnd,18, temp, 255);
                        memalloc = atoi(temp)*msizet;

                        if (mins == 0 && secs==0)
                        {
                            MessageBox(hwnd,"you want to play your pmf file for 0 mins and 0 secs?","Error",MB_OK);
                            return -1;
                        }

                        if (checkState == BST_CHECKED)
                        {
                            HeaderFile[7] = 0x34;
                            HeaderFile[83] = 0x3E;
                            HeaderFile[104] = 0x01;
                            HeaderFile[109] = 0x24;
                            HeaderFile[127] = 0x12;
                            HeaderFile[129] = 0x01;
                            HeaderFile[132] = 0x20;
                            HeaderFile[133] = 0x14;
                            HeaderFile[142] = 0x09;
                            HeaderFile[143] = 0x05;
                            HeaderFile[146] = 0x00;
                            HeaderFile[148] = 0x00;
                            HeaderFile[149] = 0x00;
                            HeaderFile[150] = 0x00;
                            HeaderFile[151] = 0x00;
                            HeaderFile[160] = 0x00;
                            HeaderFile[161] = 0x00;
                        }

                        totaltime = int(108000.0 * (float(secs + (60 * mins)) + fmsec));

                        timeshifted=3;
                        int var1 = timecount;
                        int var2 = totaltime;
                        while ( timeshifted != var1 )
                        {
                            ++var1;
                            var2 >>= 8;
                        }
                        results = var2;
                        HeaderFile[92] = results;
                        HeaderFile[118] = results;

                        timeshifted=2;
                        var1 = timecount;
                        var2 = totaltime;
                        while ( timeshifted != var1 )
                        {
                            ++var1;
                            var2 >>= 8;
                        }
                        results = mask4 & var2;
                        HeaderFile[93] = results;
                        HeaderFile[119] = results;

                        timeshifted=1;
                        var1 = timecount;
                        var2 = totaltime;
                        while ( timeshifted != var1 )
                        {
                            ++var1;
                            var2 >>= 8;
                        }
                        results = mask4 & var2;
                        HeaderFile[94] = results;
                        HeaderFile[120] = results;

                        results = mask4 & totaltime;
                        HeaderFile[95] = results;
                        HeaderFile[121] = results;

                        if (savezFileName == NULL)
                        {
                            MessageBox(hwnd,"What do you want to save the file as??","error",MB_OK);
                            return -1;
                        }
                        if (editheader(szFileName) == -1)
                        {
                            MessageBox(hwnd,"cannot read file size!","error",MB_OK);
                            return -1;
                        }
                        if (FileCombine(szFileName,savezFileName) == -1)
                        {
                            MessageBox(hwnd,"Can't Combine File!","error",MB_OK);
                            return -1;
                        }

                        fclose(mpsfile);
                        fclose(gameboot);
                        MessageBox(hwnd,"Done! Enjoy =c]",titlename,MB_OK);
                    }
                    if (LOWORD(wParam) == 19)
                    {
                        char temp[255];
                        switch(msizet)
                        {
                        case 0:
                            msizet=1000;
                            SetDlgItemText(hwnd,19,"KB");
                            break;

                        case 1000:
                            msizet=1024;
                            SetDlgItemText(hwnd,19,"KiB");
                            break;

                        case 1024:
                            msizet=1000000;
                            SetDlgItemText(hwnd,19,"MB");
                            break;

                        case 1000000:
                            msizet=1048576;
                            SetDlgItemText(hwnd,19,"MiB");
                            break;

                        case 1048576:
                            msizet=0;
                            SetDlgItemText(hwnd,19,"bytes");
                            break;
                        }
                    }
                }
                break;
         }
        case WM_CREATE:
            label1 = lbel(hwnd,1,"Path of your MPS File:");
            setwdthhgt(100, 15,label1);
            setpos(10,10,label1);

            edit1 = crteedtbox(hwnd,2);
            setwdthhgt(150, 20,edit1);
            setpos(10,30,edit1);

            button1 =bttn(hwnd,3, "browse");
            setwdthhgt(50, 20,button1);
            setpos(170,30,button1);


            label2 = lbel(hwnd,4,"File Size: 0 kb");
            setwdthhgt(100, 15,label2);
            setpos(10,60,label2);

            label3 = lbel(hwnd,5,"Save As:");
            setwdthhgt(100, 15,label3);
            setpos(250,10,label3);

            edit2 = crteedtbox(hwnd,6);
            setwdthhgt(150, 20,edit2);
            setpos(250,30,edit2);

            button2 =bttn(hwnd,7, "browse");
            setwdthhgt(50, 20,button2);
            setpos(420,30,button2);

            button3 =bttn(hwnd,8, "Convert");
            setwdthhgt(55, 20,button3);
            setpos(420,115,button3);

            label4 = lbel(hwnd,9,"Total Time:");
            setwdthhgt(60, 15,label4);
            setpos(10,90,label4);

            label6 = lbel(hwnd,12,"M:");
            setwdthhgt(15, 15,label6);
            setpos(80,90,label6);

            edit4 = crteedtbox(hwnd,13);
            setwdthhgt(25, 20,edit4);
            setpos(95,87,edit4);

            label7 = lbel(hwnd,14,"S:");
            setwdthhgt(15, 15,label7);
            setpos(125,90,label7);

            edit5 = crteedtbox(hwnd,15);
            setwdthhgt(20, 20,edit5);
            setpos(140,87,edit5);

            label5 = lbel(hwnd,10,"Ms:");
            setwdthhgt(20, 15,label5);
            setpos(165,90,label5);

            edit3 = crteedtbox(hwnd,11);
            setwdthhgt(25, 20,edit3);
            setpos(185,87,edit3);

            chkbx1 = chkbox(hwnd,16, "Make Icon");
            setwdthhgt(80, 20,chkbx1);
            setpos(10,115,chkbx1);

            label8 = lbel(hwnd,17,"Buff size:");
            setwdthhgt(45, 15,label8);
            setpos(190,118,label8);

            edit6 = crteedtbox(hwnd,18);
            setwdthhgt(60, 20,edit6);
            setpos(235,115,edit6);

            button4 =bttn(hwnd,19, "bytes");
            setwdthhgt(35, 20,button4);
            setpos(295,115,button4);

            SetDlgItemText(hwnd,11,"0");
            SetDlgItemText(hwnd,13,"0");
            SetDlgItemText(hwnd,15,"0");
            SetDlgItemText(hwnd,18,"0");

            SetDlgItemText(hwnd,2,NULL);
            SetDlgItemText(hwnd,6,NULL);
            break;
        case WM_DESTROY:
            PostQuitMessage (0);       /* send a WM_QUIT to the message queue */
            break;
        default:                      /* for messages that we don't deal with */
            char temp[11];
            GetDlgItemTextA(hwnd,13,temp,5);
            if(temp[0]=='0' && temp[1]>='0')
            { strncpy(temp,&temp[1],5);
            SetDlgItemTextA(hwnd,13,temp); }
            if(!temp[0])
            { mins=0; SetDlgItemTextA(hwnd,13,"0"); }
            else if(IsNumber(temp))
            {
                if(atoi(temp)>999){
                    temp[3]=0;
                    _itoa(mins,temp,10);
                    SetDlgItemTextA(hwnd,13,temp);
                }
                mins=atoi(temp);
            } else {
                _itoa(mins,temp,10);
                SetDlgItemTextA(hwnd,13,temp);
            }
            GetDlgItemTextA(hwnd,15,temp,4);
            if(temp[0]=='0' && temp[1]>='0')
            { strncpy(temp,&temp[1],5);
            SetDlgItemTextA(hwnd,15,temp); }
            if(!temp[0])
            { secs=0; SetDlgItemTextA(hwnd,15,"0"); }
            else if(IsNumber(temp))
            {
                if(atoi(temp)>59){
                    temp[2]=0;
                    _itoa(secs,temp,10);
                    SetDlgItemTextA(hwnd,15,temp);
                }
                secs=atoi(temp);
            } else {
                _itoa(secs,temp,10);
                SetDlgItemTextA(hwnd,15,temp);
            }
            GetDlgItemTextA(hwnd,11,temp,5);
            if(temp[0]=='0' && temp[1]>='0')
            { strncpy(temp,&temp[1],5);
            SetDlgItemTextA(hwnd,11,temp); }
            if(!temp[0])
            { msec=0; SetDlgItemTextA(hwnd,11,"0"); }
            else if(IsNumber(temp))
            {
                if(atoi(temp)>999){
                    temp[3]=0;
                    _itoa(msec,temp,10);
                    SetDlgItemTextA(hwnd,11,temp);
                }
                msec=atoi(temp);
            } else {
                _itoa(msec,temp,10);
                SetDlgItemTextA(hwnd,11,temp);
            }
            GetDlgItemTextA(hwnd,18,temp,10);
            if(temp[0]=='0' && temp[1]>='0')
            { strncpy(temp,&temp[1],10);
            SetDlgItemTextA(hwnd,18,temp); }
            if(!temp[0])
            { memalloc=0; SetDlgItemTextA(hwnd,18,"0"); }
            else if(IsNumber(temp))
                memalloc=atoi(temp)*msizet;
            else
            {
                _itoa(memalloc,temp,10);
                SetDlgItemTextA(hwnd,18,temp);
            }
            return DefWindowProc (hwnd, message, wParam, lParam);
    }

    return 0;
}

HWND crteedtbox(HWND hwnd, int ID)
{
	HWND hedit;
	HFONT hf;

	hedit = CreateWindowEx(WS_EX_TRANSPARENT , "EDIT", NULL,
        SS_NOTIFY|WS_CHILD | WS_VISIBLE | WS_BORDER | EM_SETWORDBREAKPROC,
        10, 30, 50, 17, hwnd, (HMENU)IntToPtr(ID), GetModuleHandle(NULL), NULL);
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0,"MS Sans Serif");
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hedit;
}

HWND lbel(HWND hwnd, int ID, const char* caption)
{
    HWND hedit;
	HFONT hf;
    hedit = CreateWindowEx(WS_EX_TRANSPARENT, "STATIC", caption,
		SS_NOTIFY|WS_CHILD | WS_VISIBLE | WS_EX_TRANSPARENT,
		10, 30, 50, 17, hwnd, (HMENU)IntToPtr(ID), GetModuleHandle(NULL), NULL);
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0,"MS Sans Serif");
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
    return hedit;
}

HWND bttn(HWND hwnd, int ID, const char* caption)
{
	HWND hEdit;
	HFONT hf;
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0, "MS Sans Serif");
	hEdit = CreateWindowEx(0u, "BUTTON", caption,
		WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON,
		10, 10, 25, 17, hwnd, (HMENU)IntToPtr(ID), GetModuleHandle(NULL), NULL);
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hEdit;
}

HWND chkbox(HWND hwnd, int ID, const char* caption)
{
	HWND hEdit;
	HFONT hf;
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0, "MS Sans Serif");
	hEdit = CreateWindowEx(0u, "BUTTON", caption,
		WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX,
		10, 10, 25, 17, hwnd, (HMENU)IntToPtr(ID), GetModuleHandle(NULL), NULL);
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hEdit;
}

void setwdthhgt(int x, int y,HWND hwnd)
{
	RECT rcClient;
	GetClientRect(hwnd, &rcClient);
	SetWindowPos(hwnd, NULL, rcClient.left,rcClient.top , x, y, SWP_NOZORDER);
}

void setpos(int x,int y,HWND hwnd) {
	RECT rcClient;
	GetClientRect(hwnd, &rcClient);
	SetWindowPos(hwnd, NULL, x,y , rcClient.right, rcClient.bottom, 0u);
}

long GetFileSize(char* tfile)
{
  long flesize=0;
  FILE* a;

  a=fopen(tfile,"rb");
  if (a == NULL) return -1;
  fseek(a,0,SEEK_END);
  flesize = ftell(a);
  fclose(a);
  return flesize;
}

int FileCombine(char* mpsfile,char* newfile)
{
   assert(!cmpchar(mpsfile,newfile) && "Error: Input and output file are the same.");
   printf("Inserting Header File...\n");
   if (insertheader(newfile) == -1) return -1;
   printf("Combining both Header and the MPS into one file (%s).\n",newpath);
   if (insertmps(mpsfile) == -1) return -1;
   return 1;
}

int editheader(char* filename)
{
  fsize = GetFileSize(filename);//00001.MPS");
  if (fsize == -1) return -1;
  HeaderFile[12] = mask4 & HIBYTE(fsize);
  HeaderFile[13] = mask4 & HIWORD(fsize);
  HeaderFile[14] = mask4 & ((unsigned int)fsize >> 8);
  r1 = mask4 & fsize;
  HeaderFile[15] = mask4 & fsize;
  return 1;
}

int insertheader(char* filename)
{
  int i=0;
  gameboot = fopen(filename,"w+b");

  if (gameboot == NULL)
  {
      printf("can't write to file! maybe its being used?");
      return -1;
  }

  fwrite(HeaderFile,1,2048,gameboot);
  fflush(gameboot);

  return 1;
}

int insertmps(char* filename)
{
  mpsfile =fopen(filename,"rb");
  char *buff;
  int i=0;
  size_t fs=GetFileSize(filename);
  assert(fs > 0 && "Read file failed.");
  if(memalloc<1048576 && fs>100*1048576) memalloc = 10*1048576;
  if(memalloc>0) {
    buff = (char*)malloc(memalloc);
    assert(buff && "Memory allocation failed.");
    for(size_t i=sizeof(HeaderFile);i<(fs+sizeof(HeaderFile));i+=memalloc)
    {
        fseek(mpsfile,i- sizeof(HeaderFile),SEEK_SET);
        size_t read = fread(buff,1,memalloc,mpsfile);
        assert(read && "Error while reading the input file.");
        fseek(gameboot,i,SEEK_SET);
        size_t write = fwrite(buff,1,read,gameboot);
        assert(write && "Error writing the data to the output file.");
        fflush(gameboot);
    }
    free(buff);
  } else {
    char buffer[2];
    for(size_t i=0;i<fs;i++){
        size_t read = fread(buffer,1,1,mpsfile);
        assert(read && "Error while reading the input file.");
        fseek(gameboot,sizeof(HeaderFile),SEEK_SET);
        size_t write = fwrite(buffer,1,1,gameboot);
        assert(write && "Error writing the data to the output file.");
        fflush(gameboot);
    }
  }
  return 1;
}

int flenmefx(char* infile)
{
  while(isend!=1)
  {
     if (infile[counter2] == '\0')
     {
         isend = 1;
     }
     if (infile[counter2] == '\\')
     {
         newinfile[counter] = infile[counter2];
         counter++;
         newinfile[counter] = '\\';
     } else {
         newinfile[counter] = infile[counter2];
     }
     counter2++;
     counter++;
  }
  return 0;
}

int gtandmkpth()
{
  int mark=0;
  int cnt=strlen(newinfile);
  int cnt2=0;
  strcpy(newpath,newinfile);
  while(mark!=1)
  {
      if (infile[cnt] == '\\')
      {

          newpath[cnt+2] = '\0';
          mark=1;
      } else {
             cnt--;
      }
  }

  sprintf(&newpath[cnt+2],"gameboot.pmf\0");
  return 1;
}

int CheckMPS(char* filename)
{
   FILE* a;
   char mps[5];

   a = fopen(filename,"rb");
   if (a == NULL) return -1;
   fseek(a,0,SEEK_SET);
   fread(mps,1,5,a);

   if(!memcmp(mps,"\0\0\x01\xBA\x44",5)) return 1;

   return 0;
}

bool cmpchar(char* str1, char* str2)
{
    if(strlen(str1) == strlen(str2)){
        for(size_t i=0;i<strlen(str1);i++)
        {
            if(str1[i] != str2[i])
                return false;
        }
        return true;
    }
    return false;
}

bool IsNumber(const char *str)
{
    for(int i=0;i<strlen(str);i++)
    { if(str[i]<'0'||str[i]>'9') return false; }
    return true;
}
